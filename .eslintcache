[{"C:\\front\\react-apps\\star-db\\src\\index.js":"1","C:\\front\\react-apps\\star-db\\src\\components\\app\\app.js":"2","C:\\front\\react-apps\\star-db\\src\\components\\app\\index.js":"3","C:\\front\\react-apps\\star-db\\src\\components\\random-planet\\random-planet.js":"4","C:\\front\\react-apps\\star-db\\src\\services\\swapi-service.js":"5","C:\\front\\react-apps\\star-db\\src\\components\\spinner\\spinner.js":"6","C:\\front\\react-apps\\star-db\\src\\components\\spinner\\index.js":"7"},{"size":1256,"mtime":1606214460345,"results":"8","hashOfConfig":"9"},{"size":528,"mtime":1587026536000,"results":"10","hashOfConfig":"9"},{"size":46,"mtime":1587026536000,"results":"11","hashOfConfig":"9"},{"size":1809,"mtime":1606222575073,"results":"12","hashOfConfig":"9"},{"size":2017,"mtime":1606220538031,"results":"13","hashOfConfig":"9"},{"size":325,"mtime":1606222010762,"results":"14","hashOfConfig":"9"},{"size":59,"mtime":1606221217918,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},"1e8jn2b",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\front\\react-apps\\star-db\\src\\index.js",["31"],"class SwapiService {\r\n\r\n    _apiBase = 'https://swapi.dev/api'\r\n\r\n    async getResource(url) {\r\n        const res = await fetch(`${this._apiBase}${url}`);\r\n        if(!res.ok) {\r\n            throw new Error(`Could not fetch ${url}` + `, received ${res.status}`)\r\n        }\r\n        const body = await res.json();\r\n        return body;\r\n    }\r\n\r\n    async getAllPeople() {\r\n        const res = await this.getResource(`/people/`);\r\n        return res.results;\r\n    }\r\n\r\n    getPerson(id) {\r\n        return this.getResource(`/people/${id}/`)\r\n    }\r\n\r\n    async getAllPlanets() {\r\n        const res = await this.getResource(`/planets/`);\r\n        return res.results;\r\n    }\r\n\r\n    getPlanet(id) {\r\n        return this.getResource(`/planets/${id}/`)\r\n    }\r\n\r\n    async getAllStarships() {\r\n        const res = await this.getResource(`/starships/`);\r\n        return res.results;\r\n    }\r\n\r\n    getStarship(id) {\r\n        return this.getResource(`/starships/${id}/`)\r\n    }\r\n }\r\n\r\n\r\nconst swapi = new SwapiService();\r\n\r\nswapi.getPerson(3).then((p) => {\r\n    console.log(p.name);\r\n})\r\n\r\n/*\r\ngetResource('https://swapi.dev/api/people/1/')\r\n    .then((body) => {\r\n        console.log(body);\r\n    })\r\n    .catch((err) => {\r\n        console.error(err);\r\n    });*/\r\n\r\n","C:\\front\\react-apps\\star-db\\src\\components\\app\\app.js",[],"C:\\front\\react-apps\\star-db\\src\\components\\app\\index.js",[],"C:\\front\\react-apps\\star-db\\src\\components\\random-planet\\random-planet.js",["32"],"C:\\front\\react-apps\\star-db\\src\\services\\swapi-service.js",[],"C:\\front\\react-apps\\star-db\\src\\components\\spinner\\spinner.js",[],"C:\\front\\react-apps\\star-db\\src\\components\\spinner\\index.js",[],{"ruleId":"33","severity":1,"message":"34","line":8,"column":54,"nodeType":"35","messageId":"36","endLine":8,"endColumn":55},{"ruleId":"37","severity":1,"message":"38","line":54,"column":15,"nodeType":"39","endLine":55,"endColumn":86},"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]